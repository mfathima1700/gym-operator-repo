// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// firstname, last name?
// username? 
// goals/notes
// days attended -> bookings? 
// gym
// membership level

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  name          String?
  password      String
  hashedPassword String?
  createdAt     DateTime        @default(now())
  gender        GenderStatus?
  gymRole       GymRole
  bookings      Booking[]
  gym           Gym?            @relation("UserGym") // One-to-one relationship with Gym
  memberships   Membership[]
  dateOfBirth   DateTime?
  goals         Goal[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  updatedAt     DateTime        @updatedAt
  userRole      UserRole
  isTrainer     Boolean? @default(false)
  phoneNumber     String?         // New field
  country         String?         // New field
  emailNotifications     String? @default("everything") // New field
  pushNotifications String?        @default("everything")
 classesTaught   Class[] @relation("InstructorClasses")
}

model Gym {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  ownerId     String       @unique @db.ObjectId // Ensure uniqueness for one-to-one
  owner       User         @relation("UserGym", fields: [ownerId], references: [id]) // One-to-one relationship with User
  memberships Membership[]
  classes     Class[]
  createdAt   DateTime     @default(now())
  gymCode     String?      @unique @default(uuid())
  country     String?
  city         String?
  postcode        String?
  streetAddress  String?
  state         String?
  description   String?
  logo         String?
}

// Membership model
model Membership {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  gymId     String           @db.ObjectId
  startDate DateTime
  endDate   DateTime
  status    MembershipStatus // Enum: 'ACTIVE', 'INACTIVE'
  user      User             @relation(fields: [userId], references: [id]) // Relation field
  gym       Gym              @relation(fields: [gymId], references: [id])
}

// cost

// Class model
model Class {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  gymId           String          @db.ObjectId
  gym             Gym             @relation(fields: [gymId], references: [id])
  bookings        Booking[]
  capacity        Int?
  intensity       IntensityRating?
  skillLevel      SkillLevel?
  instructorId    String?  @db.ObjectId  
  instructor      User?    @relation("InstructorClasses", fields: [instructorId], references: [id]) // âœ… Fix the relation name
  recurrence      Occurance?          // e.g., "one-off", "weekly", "biweekly"
  duration        Int?             // Duration in minutes
  days            String[]        // Array of selected weekdays
  room            String?         // Optional: Room name or reference
  startDate       DateTime?
  endDate         DateTime?
}

// instructor
// current members
// equipment needed string
// nb. current people - just count this? 
// recurring? 
// room string or Room class

// Booking model
model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  classId     String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  class       Class    @relation(fields: [classId], references: [id])
  bookingDate DateTime @default(now())
}

// Enums for roles and membership status
enum GymRole {
  MEMBER
  OWNER
}

enum UserRole {
  ADMIN
  USER
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum IntensityRating {
  LOW
  MODERATE
  INTENSE
  EXTREME
}

enum GenderStatus {
  MALE
  FEMALE
  OTHER
}

enum Occurance {
  WEEKLY
  ONCE
  BIWEEKLY
}

model Goal {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId // Reference to the User model
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  title      String // Title of the goal (e.g., "Lose 5 kg", "Run a 5k")
  notes      String? // Optional details about the goal
  targetDate DateTime // Deadline or target date for achieving the goal
  status     GoalStatus @default(IN_PROGRESS) // Goal status
  createdAt  DateTime   @default(now()) // Automatically set on creation
  updatedAt  DateTime   @updatedAt // Automatically updated on changes
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// may not be needed
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
